///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Login
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The accounttype2 recording.
    /// </summary>
    [TestModule("84720815-41f5-48e7-bd28-b67d98cbab70", ModuleType.Recording, 1)]
    public partial class accounttype2 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SetupAndTeardownRepository repository.
        /// </summary>
        public static SetupAndTeardownRepository repo = SetupAndTeardownRepository.Instance;

        static accounttype2 instance = new accounttype2();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public accounttype2()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static accounttype2 Instance
        {
            get { return instance; }
        }

#region Variables

        /// <summary>
        /// Gets or sets the value of variable CheckingAccountType.
        /// </summary>
        [TestVariable("5e718e21-dabe-4c31-90f4-9c409a87ec39")]
        public string CheckingAccountType
        {
            get { return repo.CheckingAccountType; }
            set { repo.CheckingAccountType = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Title.
        /// </summary>
        [TestVariable("f5f0bd62-b91a-4f91-ad4c-7ca1a739eb88")]
        public string Title
        {
            get { return repo.Title; }
            set { repo.Title = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'Finacle.CheckingAccountVariable'.", repo.Finacle.CheckingAccountVariableInfo, new RecordItemIndex(0));
            repo.Finacle.CheckingAccountVariable.Element.InvokeActionWithText("PerformClick");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'Finacle.OpenAccountHeaderVariable'", repo.Finacle.OpenAccountHeaderVariableInfo, new RecordItemIndex(1));
            repo.Finacle.OpenAccountHeaderVariableInfo.WaitForAttributeEqual(5000, "Visible", "True");
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
